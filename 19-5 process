#include "process.h"
#include <math.h>

float sumlevel = 0.0;

process::process(int Mode, udp *CtrlSocket, serialPort *Stm, RealsenseCamera *camera,
                 std::string calib_path, std::string bottle_path, std::string cup_path)
{
    this->processMode = Mode;
    this->processSocket = CtrlSocket;
    this->processStm = Stm;
    connect(this->processStm, SIGNAL(readySensor(float)), this, SLOT(Waterlvl(float)));
    this->timerlvl = new QTimer;

    connect(this, SIGNAL(Sig_JOBGapChai()), this, SLOT(JOB_GapChai()));
    connect(this, SIGNAL(Sig_JOBTraChai()), this, SLOT(JOB_TraChai()));
    connect(this, SIGNAL(Sig_JOBGapLy()), this, SLOT(JOB_GapLy()));
    connect(this, SIGNAL(Sig_JOBTraLy()), this, SLOT(JOB_TraLy()));
    connect(this, SIGNAL(Sig_JOBRotnuoc()), this, SLOT(JOB_Rotnuoc()));
    connect(this, SIGNAL(Sig_JOBClear(int)), this, SLOT(JOB_Clear(int)));
    connect(this, SIGNAL(Sig_JOBMain()), this, SLOT(JOB_Main()));

    this->camera = camera;

    Convert::loadMatFile(this->c2b, calib_path + "/calibw2c.yml");
    Convert::loadMatFile(this->g2e, calib_path + "/calibo2e.yml");

//    ppf = new PoseEstimation(bottle_path,
//                             0.025, 0.05, 30,
//                             1.0/30.0, 0.03, 7, 100, 0.005, 2.5, 5);

    ppf = new PoseEstimation(cup_path,
                             0.025, 0.05, 30,
                             1.0/30.0, 0.03, 7, 100, 0.005, 2.5, 5);
    connect(this->camera, SIGNAL(singlePCReady()), this, SLOT(caculate()));

    ControlLib::delay_ms(500);
    Q_EMIT Sig_JOBClear(2);
    ControlLib::delay_ms(500);
    ppf->start();
}

void process::startThread()
{
    bStart = true;
}

void process::stopThread()
{
    bStart = false;
}

void process::run()
{
    bStart = true;

    while(bStart)
    {
        // Main JOB
        if(!bStartProcess) continue;

        //ControlLib::AppOutput("Proccessing",this->ProcessTxt);
        Q_EMIT Sig_JOBMain();
        ControlLib::delay_ms(500);

        while(!bMain)
        {
            ControlLib::delay_ms(10);
        };

        bMain = false;

        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->WriteByte(20, 1);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);

        // Gap Ly
        Q_EMIT Sig_JOBGapLy();
        ControlLib::delay_ms(500);

        while(!bGapChai)
        {
            ControlLib::delay_ms(10);
        };

        bGapChai = false;

        // Gap Chai
        Q_EMIT Sig_JOBGapChai();
        ControlLib::delay_ms(500);

        while(!bRotnuoc)
        {
            ControlLib::delay_ms(10);
        };

        bRotnuoc = false;

        // Rot nuoc
        Q_EMIT Sig_JOBRotnuoc();
        ControlLib::delay_ms(500);


        while(!bTraChai)
        {
            ControlLib::delay_ms(10);
        };

        bTraChai = false;


        // Tra chai
        Q_EMIT Sig_JOBTraChai();
        ControlLib::delay_ms(500);

        while(!bTraLy)
        {
            ControlLib::delay_ms(10);
        };

        bTraLy = false;

        // Tra Ly
        Q_EMIT Sig_JOBTraLy();
        ControlLib::delay_ms(500);

        while(!bClear)
        {
            ControlLib::delay_ms(10);
        };

        bClear = false;

        Q_EMIT Sig_JOBClear(1);
        ControlLib::delay_ms(500);

        bStartProcess = false;

        Q_EMIT Sig_finishProcess(true);

    }
}

void process::JOB_Main()
{
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    QString Job = "LV-DP-MAIN";
    char jobname[Job.length()];
    strcpy(jobname,Job.toStdString().c_str());
    this->processSocket->SelectJob(jobname);
    ControlLib::delay_ms(100);
    this->processSocket->StartJob();
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    bMain = true;
}

void process::JOB_GapChai()
{
    // Finish JOB_GapLy and Start JOB_GapChai
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->WriteByte(11, 0);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    int8_t byte;
    this->processSocket->ReadByte(50, &byte);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    while(byte != 1)
    {
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->ReadByte(50, &byte);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }

    this->processStm->startSend(1,serialPort::GripperNutri);
    ControlLib::delay_ms(500);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);

    this->processSocket->WriteByte(70, 1);
    ControlLib::delay_ms(100);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    // Finish JOB_GapChai and Start JOtrueB_RotNuoc
    int8_t byte12;
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->ReadByte(12, &byte12);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    while(byte12 != 1)
    {
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->ReadByte(12, &byte12);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }

    bRotnuoc = true;
}

void process::JOB_TraChai()
{
    // Start JOB_TraChai
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->WriteByte(13, 0);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    int8_t byte;
    this->processSocket->ReadByte(50, &byte);

    while(byte != 0)
    {
        this->processSocket->ReadByte(50, &byte);
        ControlLib::delay_ms(100);
    }

    this->processStm->startSend(1,serialPort::GripperRelease);
    ControlLib::delay_ms(1000);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);

    this->processSocket->WriteByte(70, 0);
    ControlLib::delay_ms(100);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    // Finish JOB_TraChai and Start JOB_TraLy
    int8_t byte14;
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->ReadByte(14, &byte14);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    while(byte14 != 1)
    {
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->ReadByte(14, &byte14);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }

    bTraLy = true;

}

void process::JOB_GapLy()
{
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    // Gap Ly
    int8_t byte;
    this->processSocket->ReadByte(50, &byte);

    while(byte != 1)
    {
        this->processSocket->ReadByte(50, &byte);
        ControlLib::delay_ms(100);
    }

    this->processStm->startSend(1,serialPort::GripperPinkCup);
    ControlLib::delay_ms(500);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);

    this->processSocket->WriteByte(70, 1);
    ControlLib::delay_ms(100);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);

    // Tha ly
    this->processSocket->ReadByte(50, &byte);

    while(byte != 0)
    {
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->ReadByte(50, &byte);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }

    this->processStm->startSend(1,serialPort::GripperRelease);
    ControlLib::delay_ms(500);

    this->processSocket->WriteByte(70, 0);
    ControlLib::delay_ms(100);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    int8_t byte2;
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->ReadByte(11, &byte2);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    while(byte2 != 1)
    {
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->ReadByte(11, &byte2);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }

    bGapChai = true;
}

void process::JOB_TraLy()
{
    // Start JOB_TraLy
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->WriteByte(24, 10);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    int8_t byte;
    this->processSocket->ReadByte(50, &byte);

    while(byte != 1)
    {
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->ReadByte(50, &byte);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }

    this->processStm->startSend(1,serialPort::GripperTH);
    ControlLib::delay_ms(500);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);

    this->processSocket->WriteByte(70, 1);
    ControlLib::delay_ms(100);

    int8_t byte2;
    this->processSocket->ReadByte(50, &byte2);

    while(byte2 != 0)
    {
        this->processSocket->ReadByte(50, &byte2);
        ControlLib::delay_ms(100);
    }

    this->processStm->startSend(1,serialPort::GripperRelease);
    ControlLib::delay_ms(500);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);

    this->processSocket->WriteByte(70, 0);
    ControlLib::delay_ms(100);

    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    // Finish JOB_TraLy and Start JOB_Clear
    int8_t byte15;
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->ReadByte(15, &byte15);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    while(byte15 != 1)
    {
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->ReadByte(15, &byte15);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }

    bClear = true;
}

void process::JOB_Rotnuoc()
{
    // Start JOB_Rotnuoc
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->WriteByte(12, 0);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    float lvl1, lvl2;
    float elf = 0.75;
    int alfa = 0;
    int tim = 2000;
    this->processStm->startSend(2,1000);
    ControlLib::delay_ms(100);
    lvl1 = lvl;
    this->processStm->startSend(2,-1000);
    int k = 0;
    int n = 0;

    while(lvl1 < 28)
    {
        this->processStm->startSend(2,1000);
        ControlLib::delay_ms(100);
        lvl1 = lvl;
        this->processStm->startSend(2,-1000);
        n++;
        if(n>=10) break;
    }

    while(true)
    {
        ControlLib::delay_ms(500);
        this->processStm->startSend(2,1000);
        ControlLib::delay_ms(100);
        lvl2 = lvl;
        this->processStm->startSend(2,-1000);

        while(lvl2<24)
        {
            this->processStm->startSend(2,1000);
            ControlLib::delay_ms(100);
            lvl2 = lvl;
            k++;
            if(k > 10) break;
        }

        if(lvl2 < 30)
        {
            qDebug() << "Break";
            break; // day
        }
        else
        {
            if(lvl1 - lvl2 > elf)
            {
                lvl1 = lvl2;
                continue;
            }
            else
            {
                if(alfa == 6)
                {
                    bOOWater = true;
                    Q_EMIT Sig_OOW();

                    break;
                }
                else
                {
                    alfa++;
                    ControlLib::delay_ms(tim);
                    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
                    this->processSocket->WriteByte(71, alfa);
                    ControlLib::delay_ms(500);
                    lvl1 = lvl2;
                    ControlLib::Update_Pos(this->processMode,true,this->processSocket);
                }
            }
        }
    }

    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->WriteByte(71, 7);
    ControlLib::delay_ms(500);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);

    // Finish JOB_Rotnuoc and Start JOB_TraChai
    int8_t byte13;
    ControlLib::Update_Pos(this->processMode,false,this->processSocket);
    this->processSocket->ReadByte(13, &byte13);
    ControlLib::delay_ms(100);
    ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    while(byte13 != 1)
    {
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->ReadByte(13, &byte13);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }

    bTraChai = true;
}

void process::JOB_Clear(int mode)
{
    if(mode == 1)
    {
        // Start JOB_Clear
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        this->processSocket->WriteByte(15, 0);
        ControlLib::delay_ms(100);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }
    else if (mode == 2)
    {
        ControlLib::Update_Pos(this->processMode,false,this->processSocket);
        QString Job = "LV-DP-CLEAR";
        char jobname[Job.length()];
        strcpy(jobname,Job.toStdString().c_str());
        this->processSocket->SelectJob(jobname);
        ControlLib::delay_ms(500);
        this->processSocket->StartJob();
        ControlLib::delay_ms(200);
        ControlLib::Update_Pos(this->processMode,true,this->processSocket);
    }
}

void process::IpruptTimer()
{

}

void process::Waterlvl(float level)
{
    lvl = level;
}

void process::Startprocess()
{
    this->camera->startProcess();
}

void process::caculate()
{
    if(!bStartProcess)
    {
        this->camera->stopProcess();

        ControlLib::delay_ms(100);

        cv::ppf_match_3d::Pose3DPtr result;
        cv::Mat pcResult;
        std::vector<std::vector<int32_t>> pulses;

        bool ret1 = this->ppf->estimatePose(this->camera->pcCup_Mat, result, pcResult);

        if(ret1)
        {
            bool ret2 = this->ppf->caculateUsedPulsePose(result, this->c2b, this->g2e, pulses);
            //write
            if(ret2 && abs(pulses.at(0).at(5))<17401 && abs(pulses.at(1).at(5))<17401)
            {
                int32_t pulseWrite[12];
                for(int i=0; i<6; i++)
                {
                    pulseWrite[i] = pulses.at(0).at(i);
                    pulseWrite[i+6] = pulses.at(1).at(i);
                }

                Q_EMIT finish(pulseWrite);

                ControlLib::Update_Pos(this->processMode,false,this->processSocket);
                ControlLib::delay_ms(30);
                this->processSocket->WriteMultipleVarJoint(100, 2, pulseWrite);
                ControlLib::delay_ms(100);
                this->bStartProcess = true;
                ControlLib::AppOutput("Start process",this->ProcessTxt);
            }
            else
            {
                ControlLib::AppOutput("Cannot move to caculated position.",this->ProcessTxt);
                this->bStartProcess = false;
                Q_EMIT Sig_finishProcess(true);
                Q_EMIT Sig_poseERROR();
            }
        }
        else
        {
            ControlLib::AppOutput("There is no pose to start process.",this->ProcessTxt);
            this->bStartProcess = false;
//            this->camera->startProcess();
            Q_EMIT Sig_finishProcess(true);
            Q_EMIT Sig_poseERROR();
        }
    }
}

